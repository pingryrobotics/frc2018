package org.usfirst.frc.team2577.robot;

import org.opencv.core.*;
import org.opencv.imgproc.*;

/**
* GripPipeline class.
*
* <p>An OpenCV pipeline generated by GRIP.
*
* @author GRIP
*/
public class GripPipeline {

	//Outputs
	private Mat rgbRedOutput = new Mat();
	private Mat rgbBlueOutput = new Mat();
	private int numRed;
	private int numBlue;


	static {
		System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
	}

	public void process(Mat source) {
		
		double[] hslThreshold0Hue = {0.0, 29.48805460750853};
		double[] hslThreshold0Saturation = {189.18615107913666, 255.0};
		double[] hslThreshold0Luminance = {18.345323741007192, 255.0};
		hslThreshold(source, hslThreshold0Hue, hslThreshold0Saturation, hslThreshold0Luminance, rgbRedOutput);
		// Count the amount of red
		/*double[] rgbThreshold0Red = {69.94154676258994, 255.0};
		double[] rgbThreshold0Green = {0.0, 99.43259385665527};
		double[] rgbThreshold0Blue = {0.0, 95.0810580204778};
		rgbThreshold(source, rgbThreshold0Red, rgbThreshold0Green, rgbThreshold0Blue, rgbRedOutput);*/
		numRed = countPixels(rgbRedOutput);

		
		// Step HSL_Threshold1:
		double[] hslThreshold1Hue = {55.94622146985804, 98.99438362272963};
		double[] hslThreshold1Saturation = {220.14388489208633, 255.0};
		double[] hslThreshold1Luminance = {98.60611510791367, 255.0};
		hslThreshold(source, hslThreshold1Hue, hslThreshold1Saturation, hslThreshold1Luminance, rgbBlueOutput);
		// Count the amount of blue:
		/*double[] rgbThreshold1Red = {0.0, 54.82935153583616};
		double[] rgbThreshold1Green = {0.0, 120.10238907849828};
		double[] rgbThreshold1Blue = {36.690647482014384, 255.0};
		rgbThreshold(source, rgbThreshold1Red, rgbThreshold1Green, rgbThreshold1Blue, rgbBlueOutput);*/
		numBlue = countPixels(rgbBlueOutput);
	}
	
	public int red(){
		return numRed;
	}
	
	public int blue(){
		return numBlue;
	}

	/**
	 * Segment an image based on color ranges.
	 * @param input The image on which to perform the RGB threshold.
	 * @param red The min and max red.
	 * @param green The min and max green.
	 * @param blue The min and max blue.
	 * @param output The image in which to store the output.
	 */
	private void rgbThreshold(Mat input, double[] red, double[] green, double[] blue,
		Mat out) {
		Imgproc.cvtColor(input, out, Imgproc.COLOR_BGR2RGB);
		Core.inRange(out, new Scalar(red[0], green[0], blue[0]),
			new Scalar(red[1], green[1], blue[1]), out);
	}
	
	/**
	 * Segment an image based on hue, saturation, and luminance ranges.
	 *
	 * @param input The image on which to perform the HSL threshold.
	 * @param hue The min and max hue
	 * @param sat The min and max saturation
	 * @param lum The min and max luminance
	 * @param output The image in which to store the output.
	 */
	private void hslThreshold(Mat input, double[] hue, double[] sat, double[] lum,
		Mat out) {
		Imgproc.cvtColor(input, out, Imgproc.COLOR_BGR2HLS);
		Core.inRange(out, new Scalar(hue[0], lum[0], sat[0]),
			new Scalar(hue[1], lum[1], sat[1]), out);
	}

		
	private int countPixels(Mat src){
		int count = 0;
		for(int i = 0; i < src.rows(); i++){
			for(int j = 0; j < src.cols(); j++){
				if(src.get(i,j)[0] > 0){
					count++;
				}
			}
		}
		return count;
	}

}